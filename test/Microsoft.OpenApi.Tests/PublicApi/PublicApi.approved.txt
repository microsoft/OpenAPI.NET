[assembly: System.Reflection.AssemblyMetadata("IsTrimmable", "True")]
[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/Microsoft/OpenAPI.NET")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Microsoft.OpenApi.Hidi, PublicKey=0024000004800000940000000602000000240000525341310004000001000100957cb48387b2a5f54f5ce39255f18f26d32a39990db27cf48737afc6bc62759ba996b8a2bfb675d4e39f3d06ecb55a178b1b4031dcb2a767e29977d88cce864a0d16bfc1b3bebb0edf9fe285f10fffc0a85f93d664fa05af07faa3aad2e545182dbf787e3fd32b56aca95df1a3c4e75dec164a3f1a4c653d971b01ffc39eb3c4")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Microsoft.OpenApi.Readers.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100957cb48387b2a5f54f5ce39255f18f26d32a39990db27cf48737afc6bc62759ba996b8a2bfb675d4e39f3d06ecb55a178b1b4031dcb2a767e29977d88cce864a0d16bfc1b3bebb0edf9fe285f10fffc0a85f93d664fa05af07faa3aad2e545182dbf787e3fd32b56aca95df1a3c4e75dec164a3f1a4c653d971b01ffc39eb3c4")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Microsoft.OpenApi.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100957cb48387b2a5f54f5ce39255f18f26d32a39990db27cf48737afc6bc62759ba996b8a2bfb675d4e39f3d06ecb55a178b1b4031dcb2a767e29977d88cce864a0d16bfc1b3bebb0edf9fe285f10fffc0a85f93d664fa05af07faa3aad2e545182dbf787e3fd32b56aca95df1a3c4e75dec164a3f1a4c653d971b01ffc39eb3c4")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace Microsoft.OpenApi
{
    public class BaseOpenApiReference : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiSerializable
    {
        public BaseOpenApiReference() { }
        public BaseOpenApiReference(Microsoft.OpenApi.BaseOpenApiReference reference) { }
        public string? ExternalResource { get; init; }
        public Microsoft.OpenApi.OpenApiDocument? HostDocument { get; init; }
        public string? Id { get; init; }
        public bool IsExternal { get; }
        public bool IsFragment { get; init; }
        public bool IsLocal { get; }
        public string? ReferenceV2 { get; }
        public string? ReferenceV3 { get; }
        public Microsoft.OpenApi.ReferenceType Type { get; init; }
        protected virtual void SerializeAdditionalV31Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected virtual void SerializeAdditionalV32Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected virtual void SetAdditional31MetadataFromMapNode(System.Text.Json.Nodes.JsonObject jsonObject) { }
        protected static string? GetPropertyValueFromNode(System.Text.Json.Nodes.JsonObject jsonObject, string key) { }
    }
    public abstract class BaseOpenApiReferenceHolder<T, U, V> : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReferenceHolder, Microsoft.OpenApi.IOpenApiReferenceHolder<V>, Microsoft.OpenApi.IOpenApiReferenceHolder<T, U, V>, Microsoft.OpenApi.IOpenApiSerializable
        where T :  class, Microsoft.OpenApi.IOpenApiReferenceable, U
        where U : Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable
        where V : Microsoft.OpenApi.BaseOpenApiReference, new ()
    {
        protected BaseOpenApiReferenceHolder(Microsoft.OpenApi.BaseOpenApiReferenceHolder<T, U, V> source) { }
        protected BaseOpenApiReferenceHolder(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument, Microsoft.OpenApi.ReferenceType referenceType, string? externalResource) { }
        public T RecursiveTarget { get; }
        public V Reference { get; init; }
        public virtual U Target { get; }
        public bool UnresolvedReference { get; }
        protected abstract V CopyReference(V sourceReference);
        public abstract U CopyReferenceAsTargetElementWithOverrides(U source);
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public sealed class BodyExpression : Microsoft.OpenApi.SourceExpression
    {
        public const string Body = "body";
        public const string PointerPrefix = "#";
        public BodyExpression() { }
        public BodyExpression(Microsoft.OpenApi.JsonPointer? pointer) { }
        public override string Expression { get; }
        public string? Fragment { get; }
    }
    public class CompositeExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public CompositeExpression(string expression) { }
        public System.Collections.Generic.List<Microsoft.OpenApi.RuntimeExpression> ContainedExpressions { get; }
        public override string Expression { get; }
    }
    public class CurrentKeys
    {
        public CurrentKeys() { }
        public string? Callback { get; }
        public string? Content { get; }
        public string? Encoding { get; }
        public string? Example { get; }
        public string? Extension { get; }
        public string? Header { get; }
        public string? Link { get; }
        public System.Net.Http.HttpMethod? Operation { get; }
        public string? Path { get; }
        public string? Response { get; }
        public string? ServerVariable { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class DisplayAttribute : System.Attribute
    {
        public DisplayAttribute(string name) { }
        public string Name { get; }
    }
    public static class EnumExtensions
    {
        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2075", Justification="Fields are never trimmed for enum types.")]
        public static T? GetAttributeOfType<T>(this System.Enum enumValue)
            where T : System.Attribute { }
        public static string GetDisplayName(this System.Enum enumValue) { }
    }
    public class FormattingStreamWriter : System.IO.StreamWriter
    {
        public FormattingStreamWriter(System.IO.Stream stream, System.IFormatProvider formatProvider) { }
        public override System.IFormatProvider FormatProvider { get; }
    }
    public class HeaderExpression : Microsoft.OpenApi.SourceExpression
    {
        public const string Header = "header.";
        public HeaderExpression(string token) { }
        public override string Expression { get; }
        public string? Token { get; }
    }
    public interface IMetadataContainer
    {
        System.Collections.Generic.IDictionary<string, object>? Metadata { get; set; }
    }
    public interface IOpenApiCallback : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiCallback>
    {
        System.Collections.Generic.Dictionary<Microsoft.OpenApi.RuntimeExpression, Microsoft.OpenApi.IOpenApiPathItem>? PathItems { get; }
    }
    public interface IOpenApiDescribedElement : Microsoft.OpenApi.IOpenApiElement
    {
        string? Description { get; set; }
    }
    public interface IOpenApiElement { }
    public interface IOpenApiExample : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiExample>
    {
        System.Text.Json.Nodes.JsonNode? DataValue { get; }
        string? ExternalValue { get; }
        string? SerializedValue { get; }
        System.Text.Json.Nodes.JsonNode? Value { get; }
    }
    public interface IOpenApiExtensible : Microsoft.OpenApi.IOpenApiElement
    {
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
    }
    public interface IOpenApiExtension
    {
        void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion);
    }
    public interface IOpenApiHeader : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiHeader>
    {
        bool AllowEmptyValue { get; }
        bool AllowReserved { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        bool Deprecated { get; }
        System.Text.Json.Nodes.JsonNode? Example { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        bool Explode { get; }
        bool Required { get; }
        Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
        Microsoft.OpenApi.ParameterStyle? Style { get; }
    }
    public interface IOpenApiLink : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiLink>
    {
        string? OperationId { get; }
        string? OperationRef { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.RuntimeExpressionAnyWrapper>? Parameters { get; }
        Microsoft.OpenApi.RuntimeExpressionAnyWrapper? RequestBody { get; }
        Microsoft.OpenApi.OpenApiServer? Server { get; }
    }
    public interface IOpenApiMediaType : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiMediaType>
    {
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding>? Encoding { get; }
        System.Text.Json.Nodes.JsonNode? Example { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        Microsoft.OpenApi.OpenApiEncoding? ItemEncoding { get; }
        Microsoft.OpenApi.IOpenApiSchema? ItemSchema { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiEncoding>? PrefixEncoding { get; }
        Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
    }
    public interface IOpenApiParameter : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiParameter>
    {
        bool AllowEmptyValue { get; }
        bool AllowReserved { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        bool Deprecated { get; }
        System.Text.Json.Nodes.JsonNode? Example { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        bool Explode { get; }
        Microsoft.OpenApi.ParameterLocation? In { get; }
        string? Name { get; }
        bool Required { get; }
        Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
        Microsoft.OpenApi.ParameterStyle? Style { get; }
    }
    public interface IOpenApiPathItem : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiPathItem>
    {
        System.Collections.Generic.Dictionary<System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation>? Operations { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer>? Servers { get; }
    }
    public interface IOpenApiReadOnlyDescribedElement : Microsoft.OpenApi.IOpenApiElement
    {
        string? Description { get; }
    }
    public interface IOpenApiReadOnlyExtensible
    {
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
    }
    public interface IOpenApiReader
    {
        Microsoft.OpenApi.Reader.ReadResult Read(System.IO.MemoryStream input, System.Uri location, Microsoft.OpenApi.Reader.OpenApiReaderSettings settings);
        System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> ReadAsync(System.IO.Stream input, System.Uri location, Microsoft.OpenApi.Reader.OpenApiReaderSettings settings, System.Threading.CancellationToken cancellationToken = default);
        T? ReadFragment<T>(System.IO.MemoryStream input, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, out Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null)
            where T : Microsoft.OpenApi.IOpenApiElement;
    }
    public interface IOpenApiReferenceHolder : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiSerializable
    {
        bool UnresolvedReference { get; }
    }
    public interface IOpenApiReferenceHolder<V> : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReferenceHolder, Microsoft.OpenApi.IOpenApiSerializable
        where V : Microsoft.OpenApi.BaseOpenApiReference, new ()
    {
        V Reference { get; init; }
    }
    public interface IOpenApiReferenceHolder<out T, U, V> : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReferenceHolder, Microsoft.OpenApi.IOpenApiReferenceHolder<V>, Microsoft.OpenApi.IOpenApiSerializable
        where out T : Microsoft.OpenApi.IOpenApiReferenceable, U
        where V : Microsoft.OpenApi.BaseOpenApiReference, new ()
    {
        T RecursiveTarget { get; }
        U Target { get; }
        U CopyReferenceAsTargetElementWithOverrides(U source);
    }
    public interface IOpenApiReferenceable : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiSerializable { }
    public interface IOpenApiRequestBody : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiRequestBody>
    {
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        bool Required { get; }
        Microsoft.OpenApi.IOpenApiParameter? ConvertToBodyParameter(Microsoft.OpenApi.IOpenApiWriter writer);
        System.Collections.Generic.IEnumerable<Microsoft.OpenApi.IOpenApiParameter>? ConvertToFormDataParameters(Microsoft.OpenApi.IOpenApiWriter writer);
    }
    public interface IOpenApiResponse : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiResponse>
    {
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader>? Headers { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink>? Links { get; }
    }
    public interface IOpenApiSchema : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSchema>
    {
        Microsoft.OpenApi.IOpenApiSchema? AdditionalProperties { get; }
        bool AdditionalPropertiesAllowed { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AllOf { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AnyOf { get; }
        string? Comment { get; }
        string? Const { get; }
        System.Text.Json.Nodes.JsonNode? Default { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Definitions { get; }
        System.Collections.Generic.IDictionary<string, System.Collections.Generic.HashSet<string>>? DependentRequired { get; }
        bool Deprecated { get; }
        Microsoft.OpenApi.OpenApiDiscriminator? Discriminator { get; }
        string? DynamicAnchor { get; }
        string? DynamicRef { get; }
        System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Enum { get; }
        System.Text.Json.Nodes.JsonNode? Example { get; }
        System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Examples { get; }
        string? ExclusiveMaximum { get; }
        string? ExclusiveMinimum { get; }
        Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; }
        string? Format { get; }
        string? Id { get; }
        Microsoft.OpenApi.IOpenApiSchema? Items { get; }
        int? MaxItems { get; }
        int? MaxLength { get; }
        int? MaxProperties { get; }
        string? Maximum { get; }
        int? MinItems { get; }
        int? MinLength { get; }
        int? MinProperties { get; }
        string? Minimum { get; }
        decimal? MultipleOf { get; }
        Microsoft.OpenApi.IOpenApiSchema? Not { get; }
        System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? OneOf { get; }
        string? Pattern { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? PatternProperties { get; }
        System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Properties { get; }
        bool ReadOnly { get; }
        System.Collections.Generic.ISet<string>? Required { get; }
        System.Uri? Schema { get; }
        string? Title { get; }
        Microsoft.OpenApi.JsonSchemaType? Type { get; }
        bool UnevaluatedProperties { get; }
        bool? UniqueItems { get; }
        System.Collections.Generic.IDictionary<string, System.Text.Json.Nodes.JsonNode>? UnrecognizedKeywords { get; }
        System.Collections.Generic.IDictionary<string, bool>? Vocabulary { get; }
        bool WriteOnly { get; }
        Microsoft.OpenApi.OpenApiXml? Xml { get; }
    }
    public interface IOpenApiSecurityScheme : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSecurityScheme>
    {
        string? BearerFormat { get; }
        bool Deprecated { get; }
        Microsoft.OpenApi.OpenApiOAuthFlows? Flows { get; }
        Microsoft.OpenApi.ParameterLocation? In { get; }
        string? Name { get; }
        System.Uri? OpenIdConnectUrl { get; }
        string? Scheme { get; }
        Microsoft.OpenApi.SecuritySchemeType? Type { get; }
    }
    public interface IOpenApiSerializable : Microsoft.OpenApi.IOpenApiElement
    {
        void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer);
        void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer);
        void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer);
        void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer);
    }
    public interface IOpenApiSummarizedElement : Microsoft.OpenApi.IOpenApiElement
    {
        string? Summary { get; set; }
    }
    public interface IOpenApiTag : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyDescribedElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiTag>
    {
        Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; }
        string? Kind { get; }
        string? Name { get; }
        Microsoft.OpenApi.OpenApiTagReference? Parent { get; }
        string? Summary { get; }
    }
    public interface IOpenApiWriter
    {
        System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken = default);
        void WriteEndArray();
        void WriteEndObject();
        void WriteNull();
        void WritePropertyName(string name);
        void WriteRaw(string value);
        void WriteStartArray();
        void WriteStartObject();
        void WriteValue(bool value);
        void WriteValue(decimal value);
        void WriteValue(int value);
        void WriteValue(object value);
        void WriteValue(string value);
    }
    public interface IShallowCopyable<out T>
    {
        T CreateShallowCopy();
    }
    public interface IStreamLoader
    {
        System.Threading.Tasks.Task<System.IO.Stream> LoadAsync(System.Uri baseUrl, System.Uri uri, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IValidationContext
    {
        string PathString { get; }
        void AddError(Microsoft.OpenApi.OpenApiValidatorError error);
        void AddWarning(Microsoft.OpenApi.OpenApiValidatorWarning warning);
        void Enter(string segment);
        void Exit();
    }
    public class JsonNodeExtension : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtension
    {
        public JsonNodeExtension(System.Text.Json.Nodes.JsonNode jsonNode) { }
        public System.Text.Json.Nodes.JsonNode Node { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
    }
    public static class JsonNullSentinel
    {
        public static System.Text.Json.Nodes.JsonValue JsonNull { get; }
        public static bool IsJsonNullSentinel(this System.Text.Json.Nodes.JsonNode? node) { }
    }
    public class JsonPointer
    {
        public JsonPointer(string pointer) { }
        public Microsoft.OpenApi.JsonPointer? ParentPointer { get; }
        public string[] Tokens { get; }
        public override string ToString() { }
    }
    public class JsonSchemaReference : Microsoft.OpenApi.OpenApiReferenceWithDescription
    {
        public JsonSchemaReference() { }
        public JsonSchemaReference(Microsoft.OpenApi.JsonSchemaReference reference) { }
        public System.Text.Json.Nodes.JsonNode? Default { get; set; }
        public bool? Deprecated { get; set; }
        public System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Examples { get; set; }
        public bool? ReadOnly { get; set; }
        public string? Title { get; set; }
        public bool? WriteOnly { get; set; }
        protected override void SerializeAdditionalV31Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SerializeAdditionalV32Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SetAdditional31MetadataFromMapNode(System.Text.Json.Nodes.JsonObject jsonObject) { }
    }
    [System.Flags]
    public enum JsonSchemaType
    {
        Null = 1,
        Boolean = 2,
        Integer = 4,
        Number = 8,
        String = 16,
        Object = 32,
        Array = 64,
    }
    public sealed class MethodExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public const string Method = "$method";
        public MethodExpression() { }
        public override string Expression { get; }
    }
    public class OpenApiCallback : Microsoft.OpenApi.IOpenApiCallback, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiCallback>
    {
        public OpenApiCallback() { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.Dictionary<Microsoft.OpenApi.RuntimeExpression, Microsoft.OpenApi.IOpenApiPathItem>? PathItems { get; set; }
        public void AddPathItem(Microsoft.OpenApi.RuntimeExpression expression, Microsoft.OpenApi.IOpenApiPathItem pathItem) { }
        public Microsoft.OpenApi.IOpenApiCallback CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiCallbackReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiCallback, Microsoft.OpenApi.IOpenApiCallback, Microsoft.OpenApi.BaseOpenApiReference>, Microsoft.OpenApi.IOpenApiCallback, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiCallback>
    {
        public OpenApiCallbackReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public System.Collections.Generic.Dictionary<Microsoft.OpenApi.RuntimeExpression, Microsoft.OpenApi.IOpenApiPathItem>? PathItems { get; }
        protected override Microsoft.OpenApi.BaseOpenApiReference CopyReference(Microsoft.OpenApi.BaseOpenApiReference sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiCallback CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiCallback source) { }
        public Microsoft.OpenApi.IOpenApiCallback CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiComponents : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiComponents() { }
        public OpenApiComponents(Microsoft.OpenApi.OpenApiComponents? components) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiCallback>? Callbacks { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader>? Headers { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink>? Links { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? MediaTypes { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiPathItem>? PathItems { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiRequestBody>? RequestBodies { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiResponse>? Responses { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Schemas { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSecurityScheme>? SecuritySchemes { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiComponentsRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiComponents> KeyMustBeRegularExpression { get; }
    }
    public static class OpenApiConstants
    {
        public const string AccessCode = "accessCode";
        public const string AdditionalOperations = "additionalOperations";
        public const string AdditionalProperties = "additionalProperties";
        public const string AllOf = "allOf";
        public const string AllowEmptyValue = "allowEmptyValue";
        public const string AllowReserved = "allowReserved";
        public const string AnyOf = "anyOf";
        public const string Application = "application";
        public const string Attribute = "attribute";
        public const string AuthorizationCode = "authorizationCode";
        public const string AuthorizationUrl = "authorizationUrl";
        public const string BasePath = "basePath";
        public const string BaseRegistryUri = "https://openapi.net/";
        public const string Basic = "basic";
        public const string Bearer = "bearer";
        public const string BearerFormat = "bearerFormat";
        public const string BodyName = "x-bodyName";
        public const string Callbacks = "callbacks";
        public const string ClientCredentials = "clientCredentials";
        public const string Comment = "$comment";
        public const string Components = "components";
        public const string ComponentsSegment = "/components/";
        public const string Const = "const";
        public const string Consumes = "consumes";
        public const string Contact = "contact";
        public const string Content = "content";
        public const string ContentType = "contentType";
        public const string DataValue = "dataValue";
        public const string Default = "default";
        public const string DefaultDefault = "Default Default";
        public const string DefaultDescription = "Default Description";
        public const string DefaultName = "Default Name";
        public const string DefaultTitle = "Default Title";
        public const string Definitions = "definitions";
        public const string Defs = "$defs";
        public const string Delete = "delete";
        public const string DependentRequired = "dependentRequired";
        public const string Deprecated = "deprecated";
        public const string Description = "description";
        public const string DeviceAuthorization = "deviceAuthorization";
        public const string DeviceAuthorizationUrl = "deviceAuthorizationUrl";
        public const string Discriminator = "discriminator";
        public const string DollarRef = "$ref";
        public const string DollarSchema = "$schema";
        public const string DynamicAnchor = "$dynamicAnchor";
        public const string DynamicRef = "$dynamicRef";
        public const string Email = "email";
        public const string Encoding = "encoding";
        public const string Enum = "enum";
        public const string Example = "example";
        public const string Examples = "examples";
        public const string ExamplesExtension = "x-examples";
        public const string ExclusiveMaximum = "exclusiveMaximum";
        public const string ExclusiveMinimum = "exclusiveMinimum";
        public const string Explode = "explode";
        public const string ExtensionFieldNamePrefix = "x-";
        public const string ExternalDocs = "externalDocs";
        public const string ExternalValue = "externalValue";
        public const string Flow = "flow";
        public const string Flows = "flows";
        public const string Format = "format";
        public const string Get = "get";
        public const string Head = "head";
        public const string Headers = "headers";
        public const string Host = "host";
        public const string Id = "$id";
        public const string Identifier = "identifier";
        public const string Implicit = "implicit";
        public const string In = "in";
        public const string Info = "info";
        public const string ItemEncoding = "itemEncoding";
        public const string ItemSchema = "itemSchema";
        public const string Items = "items";
        public const string Json = "json";
        public const string JsonSchemaDialect = "jsonSchemaDialect";
        public const string Jwt = "JWT";
        public const string License = "license";
        public const string Links = "links";
        public const string Mapping = "mapping";
        public const string MaxItems = "maxItems";
        public const string MaxLength = "maxLength";
        public const string MaxProperties = "maxProperties";
        public const string Maximum = "maximum";
        public const string MediaTypes = "mediaTypes";
        public const string MinItems = "minItems";
        public const string MinLength = "minLength";
        public const string MinProperties = "minProperties";
        public const string Minimum = "minimum";
        public const string MultipleOf = "multipleOf";
        public const string Name = "name";
        public const string Namespace = "namespace";
        public const string NodeType = "nodeType";
        public const string Not = "not";
        public const string Null = "null";
        public const string Nullable = "nullable";
        public const string NullableExtension = "x-nullable";
        public const string OneOf = "oneOf";
        public const string OpenApi = "openapi";
        public const string OpenIdConnectUrl = "openIdConnectUrl";
        public const string OperationId = "operationId";
        public const string OperationRef = "operationRef";
        public const string Options = "options";
        public const string Parameters = "parameters";
        public const string Password = "password";
        public const string Patch = "patch";
        public const string PathItems = "pathItems";
        public const string Paths = "paths";
        public const string Pattern = "pattern";
        public const string PatternProperties = "patternProperties";
        public const string Post = "post";
        public const string Prefix = "prefix";
        public const string PrefixEncoding = "prefixEncoding";
        public const string Produces = "produces";
        public const string Properties = "properties";
        public const string PropertyName = "propertyName";
        public const string Put = "put";
        public const string ReadOnly = "readOnly";
        public const string RecursiveAnchor = "$recursiveAnchor";
        public const string RecursiveRef = "$recursiveRef";
        public const string RefreshUrl = "refreshUrl";
        public const string RequestBodies = "requestBodies";
        public const string RequestBody = "requestBody";
        public const string Required = "required";
        public const string Responses = "responses";
        public const string Schema = "schema";
        public const string Schemas = "schemas";
        public const string Scheme = "scheme";
        public const string Schemes = "schemes";
        public const string Scopes = "scopes";
        public const string Security = "security";
        public const string SecurityDefinitions = "securityDefinitions";
        public const string SecuritySchemes = "securitySchemes";
        public const string Self = "$self";
        public const string SerializedValue = "serializedValue";
        public const string Server = "server";
        public const string Servers = "servers";
        public const string Style = "style";
        public const string Summary = "summary";
        public const string Swagger = "swagger";
        public const string Tags = "tags";
        public const string TermsOfService = "termsOfService";
        public const string Title = "title";
        public const string TokenUrl = "tokenUrl";
        public const string Trace = "trace";
        public const string Type = "type";
        public const string UnevaluatedProperties = "unevaluatedProperties";
        public const string UniqueItems = "uniqueItems";
        public const string UnrecognizedKeywords = "unrecognizedKeywords";
        public const string Url = "url";
        public const string V2ReferenceUri = "https://registry/definitions/";
        public const string V31ExclusiveMaximum = "exclusiveMaximum";
        public const string V31ExclusiveMinimum = "exclusiveMinimum";
        public const string V3ReferenceUri = "https://registry/components/schemas/";
        public const string Value = "value";
        public const string Variables = "variables";
        public const string Version = "version";
        public const string Vocabulary = "$vocabulary";
        public const string Webhooks = "webhooks";
        public const string Wrapped = "wrapped";
        public const string WriteOnly = "writeOnly";
        public const string Xml = "xml";
        public const string Yaml = "yaml";
        public const string Yml = "yml";
        public static readonly System.Uri defaultUrl;
        public static readonly System.Version version2_0;
        public static readonly System.Version version3_0_0;
    }
    public class OpenApiContact : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiContact() { }
        public OpenApiContact(Microsoft.OpenApi.OpenApiContact contact) { }
        public string? Email { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? Name { get; set; }
        public System.Uri? Url { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiContactRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiContact> EmailMustBeEmailFormat { get; }
    }
    public class OpenApiDiscriminator : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiDiscriminator() { }
        public OpenApiDiscriminator(Microsoft.OpenApi.OpenApiDiscriminator discriminator) { }
        public Microsoft.OpenApi.OpenApiSchemaReference? DefaultMapping { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiSchemaReference>? Mapping { get; set; }
        public string? PropertyName { get; set; }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiDocument : Microsoft.OpenApi.IMetadataContainer, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiDocument() { }
        public OpenApiDocument(Microsoft.OpenApi.OpenApiDocument? document) { }
        public System.Uri BaseUri { get; }
        public Microsoft.OpenApi.OpenApiComponents? Components { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; set; }
        public Microsoft.OpenApi.OpenApiInfo Info { get; set; }
        public System.Uri? JsonSchemaDialect { get; set; }
        public System.Collections.Generic.IDictionary<string, object>? Metadata { get; set; }
        public Microsoft.OpenApi.OpenApiPaths Paths { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiSecurityRequirement>? Security { get; set; }
        public System.Uri? Self { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer>? Servers { get; set; }
        public System.Collections.Generic.ISet<Microsoft.OpenApi.OpenApiTag>? Tags { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiPathItem>? Webhooks { get; set; }
        public Microsoft.OpenApi.OpenApiWorkspace? Workspace { get; set; }
        public bool AddComponent<T>(string id, T componentToRegister) { }
        public System.Threading.Tasks.Task<string> GetHashCodeAsync(System.Threading.CancellationToken cancellationToken = default) { }
        public void RegisterComponents() { }
        public void SerializeAs(Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SetReferenceHostDocument() { }
        public static Microsoft.OpenApi.Reader.ReadResult Load(System.IO.MemoryStream stream, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null) { }
        public static System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> LoadAsync(string url, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken token = default) { }
        public static System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> LoadAsync(System.IO.Stream stream, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static Microsoft.OpenApi.Reader.ReadResult Parse(string input, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiDocumentRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiDocument> OpenApiDocumentFieldIsMissing { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiDocument> OpenApiDocumentReferencesAreValid { get; }
    }
    public static class OpenApiElementExtensions
    {
        public static System.Collections.Generic.IEnumerable<Microsoft.OpenApi.OpenApiError> Validate(this Microsoft.OpenApi.IOpenApiElement element, Microsoft.OpenApi.ValidationRuleSet ruleSet) { }
    }
    public class OpenApiEncoding : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiEncoding() { }
        public OpenApiEncoding(Microsoft.OpenApi.OpenApiEncoding encoding) { }
        public bool? AllowReserved { get; set; }
        public string? ContentType { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding>? Encoding { get; set; }
        public bool? Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader>? Headers { get; set; }
        public Microsoft.OpenApi.OpenApiEncoding? ItemEncoding { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiEncoding>? PrefixEncoding { get; set; }
        public Microsoft.OpenApi.ParameterStyle? Style { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiError
    {
        public OpenApiError(Microsoft.OpenApi.OpenApiError error) { }
        public OpenApiError(Microsoft.OpenApi.OpenApiException exception) { }
        public OpenApiError(string? pointer, string message) { }
        public string Message { get; set; }
        public string? Pointer { get; set; }
        public override string ToString() { }
    }
    public class OpenApiExample : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExample, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiExample>
    {
        public OpenApiExample() { }
        public System.Text.Json.Nodes.JsonNode? DataValue { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? ExternalValue { get; set; }
        public string? SerializedValue { get; set; }
        public string? Summary { get; set; }
        public System.Text.Json.Nodes.JsonNode? Value { get; set; }
        public Microsoft.OpenApi.IOpenApiExample CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiExampleReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiExample, Microsoft.OpenApi.IOpenApiExample, Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExample, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiExample>
    {
        public OpenApiExampleReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public System.Text.Json.Nodes.JsonNode? DataValue { get; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public string? ExternalValue { get; }
        public string? SerializedValue { get; }
        public string? Summary { get; set; }
        public System.Text.Json.Nodes.JsonNode? Value { get; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiExample CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiExample source) { }
        public Microsoft.OpenApi.IOpenApiExample CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiException : System.Exception
    {
        public OpenApiException() { }
        public OpenApiException(string message) { }
        public OpenApiException(string message, System.Exception? innerException) { }
        public string? Pointer { get; set; }
    }
    public abstract class OpenApiExtensibleDictionary<T> : System.Collections.Generic.Dictionary<string, T>, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
        where T : Microsoft.OpenApi.IOpenApiSerializable
    {
        protected OpenApiExtensibleDictionary() { }
        protected OpenApiExtensibleDictionary(System.Collections.Generic.Dictionary<string, T> dictionary, System.Collections.Generic.Dictionary<string, Microsoft.OpenApi.IOpenApiExtension>? extensions = null) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public static class OpenApiExtensibleExtensions
    {
        public static void AddExtension<T>(this T element, string name, Microsoft.OpenApi.IOpenApiExtension any)
            where T : Microsoft.OpenApi.IOpenApiExtensible { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiExtensibleRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiExtensible> ExtensionNameMustStartWithXDash { get; }
    }
    public class OpenApiExternalDocs : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiExternalDocs() { }
        public OpenApiExternalDocs(Microsoft.OpenApi.OpenApiExternalDocs externalDocs) { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Uri? Url { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiExternalDocsRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiExternalDocs> UrlIsRequired { get; }
    }
    public static class OpenApiFilterService
    {
        public static Microsoft.OpenApi.OpenApiDocument CreateFilteredDocument(Microsoft.OpenApi.OpenApiDocument source, System.Func<string, System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation, bool> predicate) { }
        public static Microsoft.OpenApi.OpenApiUrlTreeNode CreateOpenApiUrlTreeNode(System.Collections.Generic.Dictionary<string, Microsoft.OpenApi.OpenApiDocument> sources) { }
        public static System.Func<string, System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation, bool> CreatePredicate(string? operationIds = null, string? tags = null, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>? requestUrls = null, Microsoft.OpenApi.OpenApiDocument? source = null) { }
    }
    public class OpenApiHeader : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiHeader, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiHeader>
    {
        public OpenApiHeader() { }
        public bool AllowEmptyValue { get; set; }
        public bool AllowReserved { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; set; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; set; }
        public bool Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public bool Required { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; set; }
        public Microsoft.OpenApi.ParameterStyle? Style { get; set; }
        public Microsoft.OpenApi.IOpenApiHeader CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiHeaderReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiHeader, Microsoft.OpenApi.IOpenApiHeader, Microsoft.OpenApi.OpenApiReferenceWithDescription>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiHeader, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiHeader>
    {
        public OpenApiHeaderReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public bool AllowEmptyValue { get; }
        public bool AllowReserved { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        public bool Deprecated { get; }
        public string? Description { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        public bool Explode { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public bool Required { get; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
        public Microsoft.OpenApi.ParameterStyle? Style { get; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescription CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescription sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiHeader CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiHeader source) { }
        public Microsoft.OpenApi.IOpenApiHeader CreateShallowCopy() { }
    }
    public class OpenApiInfo : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiInfo() { }
        public OpenApiInfo(Microsoft.OpenApi.OpenApiInfo info) { }
        public Microsoft.OpenApi.OpenApiContact? Contact { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiLicense? License { get; set; }
        public string? Summary { get; set; }
        public System.Uri? TermsOfService { get; set; }
        public string? Title { get; set; }
        public string? Version { get; set; }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiInfoRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiInfo> InfoRequiredFields { get; }
    }
    public class OpenApiJsonWriter : Microsoft.OpenApi.OpenApiWriterBase
    {
        public OpenApiJsonWriter(System.IO.TextWriter textWriter) { }
        public OpenApiJsonWriter(System.IO.TextWriter textWriter, Microsoft.OpenApi.OpenApiJsonWriterSettings settings) { }
        public OpenApiJsonWriter(System.IO.TextWriter textWriter, Microsoft.OpenApi.OpenApiWriterSettings? settings) { }
        [System.Obsolete("Use OpenApiJsonWriter(TextWriter textWriter, OpenApiJsonWriterSettings settings) " +
            "instead.")]
        public OpenApiJsonWriter(System.IO.TextWriter textWriter, Microsoft.OpenApi.OpenApiWriterSettings? settings, bool terseOutput) { }
        protected override int BaseIndentation { get; }
        public override void WriteEndArray() { }
        public override void WriteEndObject() { }
        public override void WriteIndentation() { }
        public override void WriteNull() { }
        public override void WritePropertyName(string name) { }
        public override void WriteRaw(string value) { }
        public override void WriteStartArray() { }
        public override void WriteStartObject() { }
        public override void WriteValue(string value) { }
        protected override void WriteValueSeparator() { }
    }
    public class OpenApiJsonWriterSettings : Microsoft.OpenApi.OpenApiWriterSettings
    {
        public OpenApiJsonWriterSettings() { }
        public bool Terse { get; set; }
    }
    public class OpenApiLicense : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiLicense() { }
        public OpenApiLicense(Microsoft.OpenApi.OpenApiLicense license) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? Identifier { get; set; }
        public string? Name { get; set; }
        public System.Uri? Url { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiLicenseRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiLicense> LicenseRequiredFields { get; }
    }
    public class OpenApiLink : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiLink, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiLink>
    {
        public OpenApiLink() { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? OperationId { get; set; }
        public string? OperationRef { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.RuntimeExpressionAnyWrapper>? Parameters { get; set; }
        public Microsoft.OpenApi.RuntimeExpressionAnyWrapper? RequestBody { get; set; }
        public Microsoft.OpenApi.OpenApiServer? Server { get; set; }
        public Microsoft.OpenApi.IOpenApiLink CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiLinkReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiLink, Microsoft.OpenApi.IOpenApiLink, Microsoft.OpenApi.OpenApiReferenceWithDescription>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiLink, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiLink>
    {
        public OpenApiLinkReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public string? OperationId { get; }
        public string? OperationRef { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.RuntimeExpressionAnyWrapper>? Parameters { get; }
        public Microsoft.OpenApi.RuntimeExpressionAnyWrapper? RequestBody { get; }
        public Microsoft.OpenApi.OpenApiServer? Server { get; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescription CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescription sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiLink CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiLink source) { }
        public Microsoft.OpenApi.IOpenApiLink CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiMediaType : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiMediaType, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiMediaType>
    {
        public OpenApiMediaType() { }
        public OpenApiMediaType(Microsoft.OpenApi.OpenApiMediaType? mediaType) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding>? Encoding { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiEncoding? ItemEncoding { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? ItemSchema { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiEncoding>? PrefixEncoding { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; set; }
        public Microsoft.OpenApi.IOpenApiMediaType CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiMediaTypeReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiMediaType, Microsoft.OpenApi.IOpenApiMediaType, Microsoft.OpenApi.BaseOpenApiReference>, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiMediaType, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiMediaType>
    {
        public OpenApiMediaTypeReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding>? Encoding { get; }
        public System.Text.Json.Nodes.JsonNode? Example { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public Microsoft.OpenApi.OpenApiEncoding? ItemEncoding { get; }
        public Microsoft.OpenApi.IOpenApiSchema? ItemSchema { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiEncoding>? PrefixEncoding { get; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
        protected override Microsoft.OpenApi.BaseOpenApiReference CopyReference(Microsoft.OpenApi.BaseOpenApiReference sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiMediaType CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiMediaType source) { }
        public Microsoft.OpenApi.IOpenApiMediaType CreateShallowCopy() { }
        public override void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public override void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public static class OpenApiNonDefaultRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiHeader> HeaderMismatchedDataType { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiMediaType> MediaTypeMismatchedDataType { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiParameter> ParameterMismatchedDataType { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiSchema> SchemaMismatchedDataType { get; }
    }
    public class OpenApiOAuthFlow : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiOAuthFlow() { }
        public OpenApiOAuthFlow(Microsoft.OpenApi.OpenApiOAuthFlow oAuthFlow) { }
        public System.Uri? AuthorizationUrl { get; set; }
        public System.Uri? DeviceAuthorizationUrl { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Uri? RefreshUrl { get; set; }
        public System.Collections.Generic.IDictionary<string, string>? Scopes { get; set; }
        public System.Uri? TokenUrl { get; set; }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiOAuthFlowRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiOAuthFlow> OAuthFlowRequiredFields { get; }
    }
    public class OpenApiOAuthFlows : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiOAuthFlows() { }
        public OpenApiOAuthFlows(Microsoft.OpenApi.OpenApiOAuthFlows oAuthFlows) { }
        public Microsoft.OpenApi.OpenApiOAuthFlow? AuthorizationCode { get; set; }
        public Microsoft.OpenApi.OpenApiOAuthFlow? ClientCredentials { get; set; }
        public Microsoft.OpenApi.OpenApiOAuthFlow? DeviceAuthorization { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiOAuthFlow? Implicit { get; set; }
        public Microsoft.OpenApi.OpenApiOAuthFlow? Password { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiOperation : Microsoft.OpenApi.IMetadataContainer, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiOperation() { }
        public OpenApiOperation(Microsoft.OpenApi.OpenApiOperation operation) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiCallback>? Callbacks { get; set; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; set; }
        public System.Collections.Generic.IDictionary<string, object>? Metadata { get; set; }
        public string? OperationId { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; set; }
        public Microsoft.OpenApi.IOpenApiRequestBody? RequestBody { get; set; }
        public Microsoft.OpenApi.OpenApiResponses? Responses { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiSecurityRequirement>? Security { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer>? Servers { get; set; }
        public string? Summary { get; set; }
        public System.Collections.Generic.ISet<Microsoft.OpenApi.OpenApiTagReference>? Tags { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiParameter : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiParameter, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiParameter>
    {
        public OpenApiParameter() { }
        public bool AllowEmptyValue { get; set; }
        public bool AllowReserved { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; set; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; set; }
        public bool Explode { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.ParameterLocation? In { get; set; }
        public string? Name { get; set; }
        public bool Required { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; set; }
        public Microsoft.OpenApi.ParameterStyle? Style { get; set; }
        public Microsoft.OpenApi.IOpenApiParameter CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiParameterReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiParameter, Microsoft.OpenApi.IOpenApiParameter, Microsoft.OpenApi.OpenApiReferenceWithDescription>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiParameter, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiParameter>
    {
        public OpenApiParameterReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public bool AllowEmptyValue { get; }
        public bool AllowReserved { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        public bool Deprecated { get; }
        public string? Description { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample>? Examples { get; }
        public bool Explode { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public Microsoft.OpenApi.ParameterLocation? In { get; }
        public string? Name { get; }
        public bool Required { get; }
        public Microsoft.OpenApi.IOpenApiSchema? Schema { get; }
        public Microsoft.OpenApi.ParameterStyle? Style { get; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescription CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescription sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiParameter CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiParameter source) { }
        public Microsoft.OpenApi.IOpenApiParameter CreateShallowCopy() { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiParameterRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiParameter> ParameterRequiredFields { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiParameter> PathParameterShouldBeInThePath { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiParameter> RequiredMustBeTrueWhenInIsPath { get; }
    }
    public class OpenApiPathItem : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiPathItem, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiPathItem>
    {
        public OpenApiPathItem() { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.Dictionary<System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation>? Operations { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer>? Servers { get; set; }
        public string? Summary { get; set; }
        public void AddOperation(System.Net.Http.HttpMethod operationType, Microsoft.OpenApi.OpenApiOperation operation) { }
        public Microsoft.OpenApi.IOpenApiPathItem CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiPathItemReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiPathItem, Microsoft.OpenApi.IOpenApiPathItem, Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiPathItem, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiPathItem>
    {
        public OpenApiPathItemReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public System.Collections.Generic.Dictionary<System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation>? Operations { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer>? Servers { get; }
        public string? Summary { get; set; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiPathItem CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiPathItem source) { }
        public Microsoft.OpenApi.IOpenApiPathItem CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiPaths : Microsoft.OpenApi.OpenApiExtensibleDictionary<Microsoft.OpenApi.IOpenApiPathItem>
    {
        public OpenApiPaths() { }
        public OpenApiPaths(Microsoft.OpenApi.OpenApiPaths paths) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiPathsRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiPaths> PathMustBeUnique { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiPaths> PathNameMustBeginWithSlash { get; }
    }
    [System.Serializable]
    public class OpenApiReaderException : Microsoft.OpenApi.OpenApiException
    {
        public OpenApiReaderException() { }
        public OpenApiReaderException(string message) { }
        public OpenApiReaderException(string message, Microsoft.OpenApi.Reader.ParsingContext context) { }
        public OpenApiReaderException(string message, System.Exception innerException) { }
    }
    public static class OpenApiRecommendedRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiPaths> GetOperationShouldNotHaveRequestBody { get; }
    }
    public class OpenApiReferenceError : Microsoft.OpenApi.OpenApiError
    {
        public readonly Microsoft.OpenApi.BaseOpenApiReference? Reference;
        public OpenApiReferenceError(Microsoft.OpenApi.OpenApiException exception) { }
        public OpenApiReferenceError(Microsoft.OpenApi.BaseOpenApiReference reference, string message) { }
    }
    public class OpenApiReferenceWithDescription : Microsoft.OpenApi.BaseOpenApiReference, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement
    {
        public OpenApiReferenceWithDescription() { }
        public OpenApiReferenceWithDescription(Microsoft.OpenApi.OpenApiReferenceWithDescription reference) { }
        public string? Description { get; set; }
        protected override void SerializeAdditionalV31Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SerializeAdditionalV32Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SetAdditional31MetadataFromMapNode(System.Text.Json.Nodes.JsonObject jsonObject) { }
    }
    public class OpenApiReferenceWithDescriptionAndSummary : Microsoft.OpenApi.OpenApiReferenceWithDescription, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiSummarizedElement
    {
        public OpenApiReferenceWithDescriptionAndSummary() { }
        public OpenApiReferenceWithDescriptionAndSummary(Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary reference) { }
        public string? Summary { get; set; }
        protected override void SerializeAdditionalV31Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SerializeAdditionalV32Properties(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override void SetAdditional31MetadataFromMapNode(System.Text.Json.Nodes.JsonObject jsonObject) { }
    }
    public class OpenApiRequestBody : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiRequestBody, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiRequestBody>
    {
        public OpenApiRequestBody() { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public bool Required { get; set; }
        public Microsoft.OpenApi.IOpenApiParameter ConvertToBodyParameter(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public System.Collections.Generic.IEnumerable<Microsoft.OpenApi.IOpenApiParameter> ConvertToFormDataParameters(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public Microsoft.OpenApi.IOpenApiRequestBody CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiRequestBodyReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiRequestBody, Microsoft.OpenApi.IOpenApiRequestBody, Microsoft.OpenApi.OpenApiReferenceWithDescription>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiRequestBody, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiRequestBody>
    {
        public OpenApiRequestBodyReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public bool Required { get; }
        public Microsoft.OpenApi.IOpenApiParameter? ConvertToBodyParameter(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public System.Collections.Generic.IEnumerable<Microsoft.OpenApi.IOpenApiParameter>? ConvertToFormDataParameters(Microsoft.OpenApi.IOpenApiWriter writer) { }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescription CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescription sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiRequestBody CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiRequestBody source) { }
        public Microsoft.OpenApi.IOpenApiRequestBody CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiResponse : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiResponse, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiResponse>
    {
        public OpenApiResponse() { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader>? Headers { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink>? Links { get; set; }
        public string? Summary { get; set; }
        public Microsoft.OpenApi.IOpenApiResponse CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiResponseReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiResponse, Microsoft.OpenApi.IOpenApiResponse, Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiResponse, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiSummarizedElement, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiResponse>
    {
        public OpenApiResponseReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType>? Content { get; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader>? Headers { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink>? Links { get; }
        public string? Summary { get; set; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescriptionAndSummary sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiResponse CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiResponse source) { }
        public Microsoft.OpenApi.IOpenApiResponse CreateShallowCopy() { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiResponseRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiResponse> ResponseRequiredFields { get; }
    }
    public class OpenApiResponses : Microsoft.OpenApi.OpenApiExtensibleDictionary<Microsoft.OpenApi.IOpenApiResponse>
    {
        public OpenApiResponses() { }
        public OpenApiResponses(Microsoft.OpenApi.OpenApiResponses openApiResponses) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiResponsesRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiResponses> ResponsesMustBeIdentifiedByDefaultOrStatusCode { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiResponses> ResponsesMustContainAtLeastOneResponse { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)]
    public class OpenApiRuleAttribute : System.Attribute
    {
        public OpenApiRuleAttribute() { }
    }
    public class OpenApiSchema : Microsoft.OpenApi.IMetadataContainer, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSchema, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSchema>
    {
        public OpenApiSchema() { }
        public Microsoft.OpenApi.IOpenApiSchema? AdditionalProperties { get; set; }
        public bool AdditionalPropertiesAllowed { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AllOf { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AnyOf { get; set; }
        public string? Comment { get; set; }
        public string? Const { get; set; }
        public System.Text.Json.Nodes.JsonNode? Default { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Definitions { get; set; }
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.HashSet<string>>? DependentRequired { get; set; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public Microsoft.OpenApi.OpenApiDiscriminator? Discriminator { get; set; }
        public string? DynamicAnchor { get; set; }
        public string? DynamicRef { get; set; }
        public System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Enum { get; set; }
        public System.Text.Json.Nodes.JsonNode? Example { get; set; }
        public System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Examples { get; set; }
        public string? ExclusiveMaximum { get; set; }
        public string? ExclusiveMinimum { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; set; }
        public string? Format { get; set; }
        public string? Id { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? Items { get; set; }
        public int? MaxItems { get; set; }
        public int? MaxLength { get; set; }
        public int? MaxProperties { get; set; }
        public string? Maximum { get; set; }
        public System.Collections.Generic.IDictionary<string, object>? Metadata { get; set; }
        public int? MinItems { get; set; }
        public int? MinLength { get; set; }
        public int? MinProperties { get; set; }
        public string? Minimum { get; set; }
        public decimal? MultipleOf { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema? Not { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? OneOf { get; set; }
        public string? Pattern { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? PatternProperties { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Properties { get; set; }
        public bool ReadOnly { get; set; }
        public System.Collections.Generic.ISet<string>? Required { get; set; }
        public System.Uri? Schema { get; set; }
        public string? Title { get; set; }
        public Microsoft.OpenApi.JsonSchemaType? Type { get; set; }
        public bool UnevaluatedProperties { get; set; }
        public bool? UniqueItems { get; set; }
        public System.Collections.Generic.IDictionary<string, System.Text.Json.Nodes.JsonNode>? UnrecognizedKeywords { get; set; }
        public System.Collections.Generic.IDictionary<string, bool>? Vocabulary { get; set; }
        public bool WriteOnly { get; set; }
        public Microsoft.OpenApi.OpenApiXml? Xml { get; set; }
        public Microsoft.OpenApi.IOpenApiSchema CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiSchemaReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiSchema, Microsoft.OpenApi.IOpenApiSchema, Microsoft.OpenApi.JsonSchemaReference>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSchema, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSchema>
    {
        public OpenApiSchemaReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public Microsoft.OpenApi.IOpenApiSchema? AdditionalProperties { get; }
        public bool AdditionalPropertiesAllowed { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AllOf { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? AnyOf { get; }
        public string? Comment { get; }
        public string? Const { get; }
        public System.Text.Json.Nodes.JsonNode? Default { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Definitions { get; }
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.HashSet<string>>? DependentRequired { get; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public Microsoft.OpenApi.OpenApiDiscriminator? Discriminator { get; }
        public string? DynamicAnchor { get; }
        public string? DynamicRef { get; }
        public System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Enum { get; }
        public System.Text.Json.Nodes.JsonNode? Example { get; }
        public System.Collections.Generic.IList<System.Text.Json.Nodes.JsonNode>? Examples { get; set; }
        public string? ExclusiveMaximum { get; }
        public string? ExclusiveMinimum { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; }
        public string? Format { get; }
        public string? Id { get; }
        public Microsoft.OpenApi.IOpenApiSchema? Items { get; }
        public int? MaxItems { get; }
        public int? MaxLength { get; }
        public int? MaxProperties { get; }
        public string? Maximum { get; }
        public int? MinItems { get; }
        public int? MinLength { get; }
        public int? MinProperties { get; }
        public string? Minimum { get; }
        public decimal? MultipleOf { get; }
        public Microsoft.OpenApi.IOpenApiSchema? Not { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? OneOf { get; }
        public string? Pattern { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? PatternProperties { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiSchema>? Properties { get; }
        public bool ReadOnly { get; set; }
        public System.Collections.Generic.ISet<string>? Required { get; }
        public System.Uri? Schema { get; }
        public string? Title { get; set; }
        public Microsoft.OpenApi.JsonSchemaType? Type { get; }
        public bool UnevaluatedProperties { get; }
        public bool? UniqueItems { get; }
        public System.Collections.Generic.IDictionary<string, System.Text.Json.Nodes.JsonNode>? UnrecognizedKeywords { get; }
        public System.Collections.Generic.IDictionary<string, bool>? Vocabulary { get; }
        public bool WriteOnly { get; set; }
        public Microsoft.OpenApi.OpenApiXml? Xml { get; }
        protected override Microsoft.OpenApi.JsonSchemaReference CopyReference(Microsoft.OpenApi.JsonSchemaReference sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiSchema CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiSchema source) { }
        public Microsoft.OpenApi.IOpenApiSchema CreateShallowCopy() { }
        public override void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public override void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public override void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiSchemaRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiSchema> ValidateSchemaDiscriminator { get; }
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.IOpenApiSchema> ValidateSchemaPropertyHasValue { get; }
        public static bool TraverseSchemaElements(string discriminatorName, System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiSchema>? childSchema) { }
        public static bool ValidateChildSchemaAgainstDiscriminator(Microsoft.OpenApi.IOpenApiSchema schema, string? discriminatorName) { }
    }
    public class OpenApiSecurityRequirement : System.Collections.Generic.Dictionary<Microsoft.OpenApi.OpenApiSecuritySchemeReference, System.Collections.Generic.List<string>>, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiSecurityRequirement() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiSecurityScheme : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSecurityScheme, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSecurityScheme>
    {
        public OpenApiSecurityScheme() { }
        public string? BearerFormat { get; set; }
        public bool Deprecated { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiOAuthFlows? Flows { get; set; }
        public Microsoft.OpenApi.ParameterLocation? In { get; set; }
        public string? Name { get; set; }
        public System.Uri? OpenIdConnectUrl { get; set; }
        public string? Scheme { get; set; }
        public Microsoft.OpenApi.SecuritySchemeType? Type { get; set; }
        public Microsoft.OpenApi.IOpenApiSecurityScheme CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiSecuritySchemeReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiSecurityScheme, Microsoft.OpenApi.IOpenApiSecurityScheme, Microsoft.OpenApi.OpenApiReferenceWithDescription>, Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSecurityScheme, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiSecurityScheme>
    {
        public OpenApiSecuritySchemeReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public string? BearerFormat { get; }
        public bool Deprecated { get; }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public Microsoft.OpenApi.OpenApiOAuthFlows? Flows { get; }
        public Microsoft.OpenApi.ParameterLocation? In { get; }
        public string? Name { get; }
        public System.Uri? OpenIdConnectUrl { get; }
        public string? Scheme { get; }
        public Microsoft.OpenApi.SecuritySchemeType? Type { get; }
        protected override Microsoft.OpenApi.OpenApiReferenceWithDescription CopyReference(Microsoft.OpenApi.OpenApiReferenceWithDescription sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiSecurityScheme CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiSecurityScheme source) { }
        public Microsoft.OpenApi.IOpenApiSecurityScheme CreateShallowCopy() { }
    }
    public static class OpenApiSerializableExtensions
    {
        public static System.Threading.Tasks.Task<string> SerializeAsJsonAsync<T>(this T element, Microsoft.OpenApi.OpenApiSpecVersion specVersion, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task SerializeAsJsonAsync<T>(this T element, System.IO.Stream stream, Microsoft.OpenApi.OpenApiSpecVersion specVersion, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task<string> SerializeAsYamlAsync<T>(this T element, Microsoft.OpenApi.OpenApiSpecVersion specVersion, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task SerializeAsYamlAsync<T>(this T element, System.IO.Stream stream, Microsoft.OpenApi.OpenApiSpecVersion specVersion, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task SerializeAsync<T>(this T element, Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task<string> SerializeAsync<T>(this T element, Microsoft.OpenApi.OpenApiSpecVersion specVersion, string format, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task SerializeAsync<T>(this T element, System.IO.Stream stream, Microsoft.OpenApi.OpenApiSpecVersion specVersion, string format, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
        public static System.Threading.Tasks.Task SerializeAsync<T>(this T element, System.IO.Stream stream, Microsoft.OpenApi.OpenApiSpecVersion specVersion, string format, Microsoft.OpenApi.OpenApiWriterSettings? settings = null, System.Threading.CancellationToken cancellationToken = default)
            where T : Microsoft.OpenApi.IOpenApiSerializable { }
    }
    public class OpenApiServer : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiServer() { }
        public OpenApiServer(Microsoft.OpenApi.OpenApiServer server) { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? Name { get; set; }
        public string? Url { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiServerVariable>? Variables { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public static class OpenApiServerExtensions
    {
        public static string? ReplaceServerUrlVariables(this Microsoft.OpenApi.OpenApiServer server, System.Collections.Generic.Dictionary<string, string>? values = null) { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiServerRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiServer> ServerRequiredFields { get; }
    }
    public class OpenApiServerVariable : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiServerVariable() { }
        public OpenApiServerVariable(Microsoft.OpenApi.OpenApiServerVariable serverVariable) { }
        public string? Default { get; set; }
        public string? Description { get; set; }
        public System.Collections.Generic.List<string>? Enum { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public enum OpenApiSpecVersion
    {
        OpenApi2_0 = 0,
        OpenApi3_0 = 1,
        OpenApi3_1 = 2,
        OpenApi3_2 = 3,
    }
    public class OpenApiTag : Microsoft.OpenApi.IOpenApiDescribedElement, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiReadOnlyDescribedElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiTag, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiTag>
    {
        public OpenApiTag() { }
        public string? Description { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; set; }
        public string? Kind { get; set; }
        public string? Name { get; set; }
        public Microsoft.OpenApi.OpenApiTagReference? Parent { get; set; }
        public string? Summary { get; set; }
        public Microsoft.OpenApi.IOpenApiTag CreateShallowCopy() { }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public class OpenApiTagReference : Microsoft.OpenApi.BaseOpenApiReferenceHolder<Microsoft.OpenApi.OpenApiTag, Microsoft.OpenApi.IOpenApiTag, Microsoft.OpenApi.BaseOpenApiReference>, Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiReadOnlyDescribedElement, Microsoft.OpenApi.IOpenApiReadOnlyExtensible, Microsoft.OpenApi.IOpenApiReferenceable, Microsoft.OpenApi.IOpenApiSerializable, Microsoft.OpenApi.IOpenApiTag, Microsoft.OpenApi.IShallowCopyable<Microsoft.OpenApi.IOpenApiTag>
    {
        public OpenApiTagReference(string referenceId, Microsoft.OpenApi.OpenApiDocument? hostDocument = null, string? externalResource = null) { }
        public string? Description { get; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; }
        public Microsoft.OpenApi.OpenApiExternalDocs? ExternalDocs { get; }
        public string? Kind { get; }
        public string? Name { get; }
        public Microsoft.OpenApi.OpenApiTagReference? Parent { get; }
        public string? Summary { get; }
        public override Microsoft.OpenApi.IOpenApiTag? Target { get; }
        protected override Microsoft.OpenApi.BaseOpenApiReference CopyReference(Microsoft.OpenApi.BaseOpenApiReference sourceReference) { }
        public override Microsoft.OpenApi.IOpenApiTag CopyReferenceAsTargetElementWithOverrides(Microsoft.OpenApi.IOpenApiTag source) { }
        public Microsoft.OpenApi.IOpenApiTag CreateShallowCopy() { }
    }
    [Microsoft.OpenApi.OpenApiRule]
    public static class OpenApiTagRules
    {
        public static Microsoft.OpenApi.ValidationRule<Microsoft.OpenApi.OpenApiTag> TagRequiredFields { get; }
    }
    public static class OpenApiTypeMapper
    {
        public static System.Type MapOpenApiPrimitiveTypeToSimpleType(this Microsoft.OpenApi.OpenApiSchema schema) { }
        public static Microsoft.OpenApi.OpenApiSchema MapTypeToOpenApiPrimitiveType(this System.Type type) { }
        public static string[] ToIdentifiers(this Microsoft.OpenApi.JsonSchemaType schemaType) { }
        public static string[]? ToIdentifiers(this Microsoft.OpenApi.JsonSchemaType? schemaType) { }
        public static Microsoft.OpenApi.JsonSchemaType ToJsonSchemaType(this string identifier) { }
        public static Microsoft.OpenApi.JsonSchemaType? ToJsonSchemaType(this string[] identifier) { }
    }
    [System.Serializable]
    public class OpenApiUnsupportedSpecVersionException : System.Exception
    {
        public OpenApiUnsupportedSpecVersionException(string specificationVersion) { }
        public OpenApiUnsupportedSpecVersionException(string specificationVersion, System.Exception innerException) { }
        public string SpecificationVersion { get; }
    }
    public class OpenApiUrlTreeNode
    {
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<string>> AdditionalData { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiUrlTreeNode> Children { get; }
        public bool IsParameter { get; }
        public string Path { get; set; }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiPathItem> PathItems { get; }
        public string Segment { get; }
        public void AddAdditionalData(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> additionalData) { }
        public void Attach(Microsoft.OpenApi.OpenApiDocument doc, string label) { }
        public Microsoft.OpenApi.OpenApiUrlTreeNode Attach(string path, Microsoft.OpenApi.IOpenApiPathItem pathItem, string label) { }
        public bool HasOperations(string label) { }
        public void WriteMermaid(System.IO.TextWriter writer) { }
        public static Microsoft.OpenApi.OpenApiUrlTreeNode Create() { }
        public static Microsoft.OpenApi.OpenApiUrlTreeNode Create(Microsoft.OpenApi.OpenApiDocument doc, string label) { }
    }
    public class OpenApiValidator : Microsoft.OpenApi.OpenApiVisitorBase, Microsoft.OpenApi.IValidationContext
    {
        public OpenApiValidator(Microsoft.OpenApi.ValidationRuleSet ruleSet) { }
        public System.Collections.Generic.IEnumerable<Microsoft.OpenApi.OpenApiValidatorError> Errors { get; }
        public System.Collections.Generic.IEnumerable<Microsoft.OpenApi.OpenApiValidatorWarning> Warnings { get; }
        public void AddError(Microsoft.OpenApi.OpenApiValidatorError error) { }
        public void AddWarning(Microsoft.OpenApi.OpenApiValidatorWarning warning) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiCallback callback) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiExample example) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiExtensible openApiExtensible) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiExtension openApiExtension) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiHeader header) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiLink link) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiMediaType mediaType) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiParameter parameter) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiPathItem pathItem) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiRequestBody requestBody) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiResponse response) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiSchema schema) { }
        public override void Visit(Microsoft.OpenApi.IOpenApiSecurityScheme securityScheme) { }
        public override void Visit(Microsoft.OpenApi.OpenApiComponents components) { }
        public override void Visit(Microsoft.OpenApi.OpenApiContact contact) { }
        public override void Visit(Microsoft.OpenApi.OpenApiDocument doc) { }
        public override void Visit(Microsoft.OpenApi.OpenApiEncoding encoding) { }
        public override void Visit(Microsoft.OpenApi.OpenApiExternalDocs externalDocs) { }
        public override void Visit(Microsoft.OpenApi.OpenApiInfo info) { }
        public override void Visit(Microsoft.OpenApi.OpenApiLicense license) { }
        public override void Visit(Microsoft.OpenApi.OpenApiOAuthFlow openApiOAuthFlow) { }
        public override void Visit(Microsoft.OpenApi.OpenApiOperation operation) { }
        public override void Visit(Microsoft.OpenApi.OpenApiPaths paths) { }
        public override void Visit(Microsoft.OpenApi.OpenApiResponses response) { }
        public override void Visit(Microsoft.OpenApi.OpenApiSecurityRequirement securityRequirement) { }
        public override void Visit(Microsoft.OpenApi.OpenApiServer server) { }
        public override void Visit(Microsoft.OpenApi.OpenApiServerVariable serverVariable) { }
        public override void Visit(Microsoft.OpenApi.OpenApiTag tag) { }
        public override void Visit(System.Collections.Generic.IDictionary<System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation> operations) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiCallback> callbacks) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample> examples) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader> headers) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink> links) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType> content) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding> encodings) { }
        public override void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiServerVariable> serverVariables) { }
        public override void Visit(System.Collections.Generic.List<Microsoft.OpenApi.IOpenApiExample> example) { }
    }
    public class OpenApiValidatorError : Microsoft.OpenApi.OpenApiError
    {
        public OpenApiValidatorError(string ruleName, string pointer, string message) { }
        public string RuleName { get; set; }
    }
    public class OpenApiValidatorWarning : Microsoft.OpenApi.OpenApiError
    {
        public OpenApiValidatorWarning(string ruleName, string pointer, string message) { }
        public string RuleName { get; set; }
    }
    public abstract class OpenApiVisitorBase
    {
        protected OpenApiVisitorBase() { }
        public Microsoft.OpenApi.CurrentKeys CurrentKeys { get; }
        public string PathString { get; }
        public virtual void Enter(string segment) { }
        public virtual void Exit() { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiCallback callback) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiExample example) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiExtensible openApiExtensible) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiExtension openApiExtension) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiHeader header) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiLink link) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiMediaType mediaType) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiParameter parameter) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiPathItem pathItem) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiReferenceHolder referenceHolder) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiRequestBody requestBody) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiResponse response) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiSchema schema) { }
        public virtual void Visit(Microsoft.OpenApi.IOpenApiSecurityScheme securityScheme) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiComponents components) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiContact contact) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiDocument doc) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiEncoding encoding) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiExternalDocs externalDocs) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiInfo info) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiLicense license) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiOAuthFlow openApiOAuthFlow) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiOperation operation) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiPaths paths) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiResponses response) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiSecurityRequirement securityRequirement) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiServer server) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiServerVariable serverVariable) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiTag tag) { }
        public virtual void Visit(Microsoft.OpenApi.OpenApiTagReference tag) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation> operations) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiCallback> callbacks) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExample> examples) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiHeader> headers) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiLink> links) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiMediaType> content) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiPathItem> webhooks) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiEncoding> encodings) { }
        public virtual void Visit(System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.OpenApiServerVariable> serverVariables) { }
        public virtual void Visit(System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter> parameters) { }
        public virtual void Visit(System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiSecurityRequirement> openApiSecurityRequirements) { }
        public virtual void Visit(System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiServer> servers) { }
        public virtual void Visit(System.Collections.Generic.ISet<Microsoft.OpenApi.OpenApiTag> openApiTags) { }
        public virtual void Visit(System.Collections.Generic.ISet<Microsoft.OpenApi.OpenApiTagReference> openApiTags) { }
        public virtual void Visit(System.Collections.Generic.List<Microsoft.OpenApi.IOpenApiExample> example) { }
        public virtual void Visit(System.Text.Json.Nodes.JsonNode node) { }
    }
    public class OpenApiWalker
    {
        public OpenApiWalker(Microsoft.OpenApi.OpenApiVisitorBase visitor) { }
        public void Walk(Microsoft.OpenApi.OpenApiDocument? doc) { }
    }
    public class OpenApiWorkspace
    {
        public OpenApiWorkspace() { }
        public OpenApiWorkspace(Microsoft.OpenApi.OpenApiWorkspace workspace) { }
        public OpenApiWorkspace(System.Uri baseUrl) { }
        public System.Uri? BaseUrl { get; }
        public void AddDocumentId(string? key, System.Uri? value) { }
        public int ComponentsCount() { }
        public bool Contains(string location) { }
        public System.Uri? GetDocumentId(string? key) { }
        public bool RegisterComponentForDocument<T>(Microsoft.OpenApi.OpenApiDocument openApiDocument, T componentToRegister, string id) { }
        public void RegisterComponents(Microsoft.OpenApi.OpenApiDocument document) { }
        public T? ResolveReference<T>(string location) { }
    }
    public static class OpenApiWriterAnyExtensions
    {
        public static void WriteAny(this Microsoft.OpenApi.IOpenApiWriter writer, System.Text.Json.Nodes.JsonNode? node) { }
        public static void WriteExtensions(this Microsoft.OpenApi.IOpenApiWriter writer, System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? extensions, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
    }
    public abstract class OpenApiWriterBase : Microsoft.OpenApi.IOpenApiWriter
    {
        protected const string IndentationString = "  ";
        protected readonly System.Collections.Generic.Stack<Microsoft.OpenApi.Scope> Scopes;
        protected OpenApiWriterBase(System.IO.TextWriter textWriter) { }
        protected OpenApiWriterBase(System.IO.TextWriter textWriter, Microsoft.OpenApi.OpenApiWriterSettings? settings) { }
        protected abstract int BaseIndentation { get; }
        public Microsoft.OpenApi.OpenApiWriterSettings Settings { get; set; }
        protected System.IO.TextWriter Writer { get; }
        protected Microsoft.OpenApi.Scope? CurrentScope() { }
        public virtual void DecreaseIndentation() { }
        protected Microsoft.OpenApi.Scope EndScope(Microsoft.OpenApi.ScopeType type) { }
        public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken = default) { }
        public virtual void IncreaseIndentation() { }
        protected bool IsArrayScope() { }
        protected bool IsObjectScope() { }
        protected bool IsTopLevelScope() { }
        protected Microsoft.OpenApi.Scope StartScope(Microsoft.OpenApi.ScopeType type) { }
        protected void VerifyCanWritePropertyName(string name) { }
        public abstract void WriteEndArray();
        public abstract void WriteEndObject();
        public virtual void WriteEnumerable<T>(System.Collections.Generic.IEnumerable<T> collection) { }
        public virtual void WriteIndentation() { }
        public abstract void WriteNull();
        public abstract void WritePropertyName(string name);
        public abstract void WriteRaw(string value);
        public abstract void WriteStartArray();
        public abstract void WriteStartObject();
        public virtual void WriteValue(System.DateTime value) { }
        public virtual void WriteValue(System.DateTimeOffset value) { }
        public virtual void WriteValue(bool value) { }
        public virtual void WriteValue(decimal value) { }
        public virtual void WriteValue(double value) { }
        public virtual void WriteValue(float value) { }
        public virtual void WriteValue(int value) { }
        public virtual void WriteValue(long value) { }
        public virtual void WriteValue(object? value) { }
        public abstract void WriteValue(string value);
        protected abstract void WriteValueSeparator();
        public static void WriteV2Examples(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiExample example, Microsoft.OpenApi.OpenApiSpecVersion version) { }
    }
    public class OpenApiWriterException : Microsoft.OpenApi.OpenApiException
    {
        public OpenApiWriterException() { }
        public OpenApiWriterException(string message) { }
        public OpenApiWriterException(string message, System.Exception? innerException) { }
    }
    public static class OpenApiWriterExtensions
    {
        public static void WriteOptionalCollection(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IEnumerable<string?>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, string?> action) { }
        public static void WriteOptionalCollection<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IEnumerable<T>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action) { }
        public static void WriteOptionalMap(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, System.Collections.Generic.HashSet<string>>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, System.Collections.Generic.HashSet<string>> action) { }
        public static void WriteOptionalMap(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, System.Text.Json.Nodes.JsonNode>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, System.Text.Json.Nodes.JsonNode> action) { }
        public static void WriteOptionalMap(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, bool>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, bool> action) { }
        public static void WriteOptionalMap(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, string>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, string> action) { }
        public static void WriteOptionalMap<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static void WriteOptionalMap<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, string, T> action)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static void WriteOptionalObject<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, T? value, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action) { }
        public static void WriteOptionalOrEmptyCollection<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IEnumerable<T>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action) { }
        public static void WriteProperty(this Microsoft.OpenApi.IOpenApiWriter writer, string name, string? value) { }
        public static void WriteProperty(this Microsoft.OpenApi.IOpenApiWriter writer, string name, bool value, bool defaultValue = false) { }
        public static void WriteProperty(this Microsoft.OpenApi.IOpenApiWriter writer, string name, bool? value, bool defaultValue = false) { }
        public static void WriteProperty<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, T value)
            where T :  struct { }
        public static void WriteProperty<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, T? value)
            where T :  struct { }
        public static void WriteRequiredCollection<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IEnumerable<T> elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static void WriteRequiredMap(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, string>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, string> action) { }
        public static void WriteRequiredMap<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, System.Collections.Generic.IDictionary<string, T>? elements, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static void WriteRequiredObject<T>(this Microsoft.OpenApi.IOpenApiWriter writer, string name, T? value, System.Action<Microsoft.OpenApi.IOpenApiWriter, T> action) { }
        public static void WriteRequiredProperty(this Microsoft.OpenApi.IOpenApiWriter writer, string name, string? value) { }
    }
    public class OpenApiWriterSettings
    {
        public OpenApiWriterSettings() { }
        public bool InlineExternalReferences { get; set; }
        public bool InlineLocalReferences { get; set; }
    }
    public class OpenApiXml : Microsoft.OpenApi.IOpenApiElement, Microsoft.OpenApi.IOpenApiExtensible, Microsoft.OpenApi.IOpenApiSerializable
    {
        public OpenApiXml() { }
        public OpenApiXml(Microsoft.OpenApi.OpenApiXml xml) { }
        public System.Collections.Generic.IDictionary<string, Microsoft.OpenApi.IOpenApiExtension>? Extensions { get; set; }
        public string? Name { get; set; }
        public System.Uri? Namespace { get; set; }
        public Microsoft.OpenApi.OpenApiXmlNodeType? NodeType { get; set; }
        public string? Prefix { get; set; }
        public virtual void SerializeAsV2(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV3(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV31(Microsoft.OpenApi.IOpenApiWriter writer) { }
        public virtual void SerializeAsV32(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public enum OpenApiXmlNodeType
    {
        [Microsoft.OpenApi.Display("element")]
        Element = 0,
        [Microsoft.OpenApi.Display("attribute")]
        Attribute = 1,
        [Microsoft.OpenApi.Display("text")]
        Text = 2,
        [Microsoft.OpenApi.Display("cdata")]
        Cdata = 3,
        [Microsoft.OpenApi.Display("none")]
        None = 4,
    }
    public class OpenApiYamlWriter : Microsoft.OpenApi.OpenApiWriterBase
    {
        public OpenApiYamlWriter(System.IO.TextWriter textWriter) { }
        public OpenApiYamlWriter(System.IO.TextWriter textWriter, Microsoft.OpenApi.OpenApiWriterSettings? settings) { }
        protected override int BaseIndentation { get; }
        public bool UseLiteralStyle { get; set; }
        public override void WriteEndArray() { }
        public override void WriteEndObject() { }
        public override void WriteNull() { }
        public override void WritePropertyName(string name) { }
        public override void WriteRaw(string value) { }
        public override void WriteStartArray() { }
        public override void WriteStartObject() { }
        public override void WriteValue(string value) { }
        protected override void WriteValueSeparator() { }
    }
    public class OperationSearch : Microsoft.OpenApi.OpenApiVisitorBase
    {
        public OperationSearch(System.Func<string, System.Net.Http.HttpMethod, Microsoft.OpenApi.OpenApiOperation, bool> predicate) { }
        public System.Collections.Generic.IList<Microsoft.OpenApi.SearchResult> SearchResults { get; }
        public override void Visit(Microsoft.OpenApi.IOpenApiPathItem pathItem) { }
        public override void Visit(System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter> parameters) { }
    }
    public enum ParameterLocation
    {
        [Microsoft.OpenApi.Display("query")]
        Query = 0,
        [Microsoft.OpenApi.Display("header")]
        Header = 1,
        [Microsoft.OpenApi.Display("path")]
        Path = 2,
        [Microsoft.OpenApi.Display("cookie")]
        Cookie = 3,
        [Microsoft.OpenApi.Display("querystring")]
        QueryString = 4,
    }
    public enum ParameterStyle
    {
        [Microsoft.OpenApi.Display("matrix")]
        Matrix = 0,
        [Microsoft.OpenApi.Display("label")]
        Label = 1,
        [Microsoft.OpenApi.Display("form")]
        Form = 2,
        [Microsoft.OpenApi.Display("simple")]
        Simple = 3,
        [Microsoft.OpenApi.Display("spaceDelimited")]
        SpaceDelimited = 4,
        [Microsoft.OpenApi.Display("pipeDelimited")]
        PipeDelimited = 5,
        [Microsoft.OpenApi.Display("deepObject")]
        DeepObject = 6,
        [Microsoft.OpenApi.Display("cookie")]
        Cookie = 7,
    }
    public sealed class PathExpression : Microsoft.OpenApi.SourceExpression
    {
        public const string Path = "path.";
        public PathExpression(string name) { }
        public override string Expression { get; }
        public string? Name { get; }
    }
    public sealed class QueryExpression : Microsoft.OpenApi.SourceExpression
    {
        public const string Query = "query.";
        public QueryExpression(string name) { }
        public override string Expression { get; }
        public string? Name { get; }
    }
    public enum ReferenceType
    {
        [Microsoft.OpenApi.Display("schemas")]
        Schema = 0,
        [Microsoft.OpenApi.Display("responses")]
        Response = 1,
        [Microsoft.OpenApi.Display("parameters")]
        Parameter = 2,
        [Microsoft.OpenApi.Display("examples")]
        Example = 3,
        [Microsoft.OpenApi.Display("requestBodies")]
        RequestBody = 4,
        [Microsoft.OpenApi.Display("headers")]
        Header = 5,
        [Microsoft.OpenApi.Display("securitySchemes")]
        SecurityScheme = 6,
        [Microsoft.OpenApi.Display("links")]
        Link = 7,
        [Microsoft.OpenApi.Display("callbacks")]
        Callback = 8,
        [Microsoft.OpenApi.Display("tags")]
        Tag = 9,
        [Microsoft.OpenApi.Display("pathItems")]
        PathItem = 10,
        [Microsoft.OpenApi.Display("mediaTypes")]
        MediaType = 11,
    }
    public sealed class RequestExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public const string Request = "$request.";
        public RequestExpression(Microsoft.OpenApi.SourceExpression source) { }
        public override string Expression { get; }
        public Microsoft.OpenApi.SourceExpression Source { get; }
    }
    public sealed class ResponseExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public const string Response = "$response.";
        public ResponseExpression(Microsoft.OpenApi.SourceExpression source) { }
        public override string Expression { get; }
        public Microsoft.OpenApi.SourceExpression Source { get; }
    }
    public abstract class RuntimeExpression : System.IEquatable<Microsoft.OpenApi.RuntimeExpression>
    {
        public const string Prefix = "$";
        protected RuntimeExpression() { }
        public abstract string Expression { get; }
        public bool Equals(Microsoft.OpenApi.RuntimeExpression? other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Microsoft.OpenApi.RuntimeExpression Build(string expression) { }
    }
    public class RuntimeExpressionAnyWrapper : Microsoft.OpenApi.IOpenApiElement
    {
        public RuntimeExpressionAnyWrapper() { }
        public RuntimeExpressionAnyWrapper(Microsoft.OpenApi.RuntimeExpressionAnyWrapper runtimeExpressionAnyWrapper) { }
        public System.Text.Json.Nodes.JsonNode? Any { get; set; }
        public Microsoft.OpenApi.RuntimeExpression? Expression { get; set; }
        public void WriteValue(Microsoft.OpenApi.IOpenApiWriter writer) { }
    }
    public sealed class Scope
    {
        public Scope(Microsoft.OpenApi.ScopeType type) { }
        public bool IsInArray { get; set; }
        public int ObjectCount { get; set; }
        public Microsoft.OpenApi.ScopeType Type { get; }
    }
    public enum ScopeType
    {
        Object = 0,
        Array = 1,
    }
    public class SearchResult
    {
        public SearchResult() { }
        public Microsoft.OpenApi.CurrentKeys? CurrentKeys { get; set; }
        public Microsoft.OpenApi.OpenApiOperation? Operation { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.IOpenApiParameter>? Parameters { get; set; }
    }
    public enum SecuritySchemeType
    {
        [Microsoft.OpenApi.Display("apiKey")]
        ApiKey = 0,
        [Microsoft.OpenApi.Display("http")]
        Http = 1,
        [Microsoft.OpenApi.Display("oauth2")]
        OAuth2 = 2,
        [Microsoft.OpenApi.Display("openIdConnect")]
        OpenIdConnect = 3,
    }
    public abstract class SourceExpression : Microsoft.OpenApi.RuntimeExpression
    {
        protected SourceExpression(string? value) { }
        protected string? Value { get; }
        public new static Microsoft.OpenApi.SourceExpression Build(string expression) { }
    }
    public static class SpecialCharacterStringExtensions { }
    public sealed class StatusCodeExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public const string StatusCode = "$statusCode";
        public StatusCodeExpression() { }
        public override string Expression { get; }
    }
    public sealed class UrlExpression : Microsoft.OpenApi.RuntimeExpression
    {
        public const string Url = "$url";
        public UrlExpression() { }
        public override string Expression { get; }
    }
    public static class ValidationContextExtensions
    {
        public static void CreateError(this Microsoft.OpenApi.IValidationContext context, string ruleName, string message) { }
        public static void CreateWarning(this Microsoft.OpenApi.IValidationContext context, string ruleName, string message) { }
    }
    public abstract class ValidationRule
    {
        public string Name { get; }
    }
    public sealed class ValidationRuleSet
    {
        public ValidationRuleSet() { }
        public ValidationRuleSet(Microsoft.OpenApi.ValidationRuleSet ruleSet) { }
        public ValidationRuleSet(System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<Microsoft.OpenApi.ValidationRule>> rules) { }
        public int Count { get; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.ValidationRule> Rules { get; }
        public void Add(System.Type key, Microsoft.OpenApi.ValidationRule rule) { }
        public void Add(System.Type key, System.Collections.Generic.List<Microsoft.OpenApi.ValidationRule> rules) { }
        public void Clear() { }
        public bool Contains(System.Type key, Microsoft.OpenApi.ValidationRule rule) { }
        public bool ContainsKey(System.Type key) { }
        public System.Collections.Generic.IList<Microsoft.OpenApi.ValidationRule> FindRules(System.Type type) { }
        public System.Collections.Generic.IEnumerator<Microsoft.OpenApi.ValidationRule> GetEnumerator() { }
        public bool Remove(Microsoft.OpenApi.ValidationRule rule) { }
        public bool Remove(System.Type key) { }
        public void Remove(string ruleName) { }
        public bool Remove(System.Type key, Microsoft.OpenApi.ValidationRule rule) { }
        public bool TryGetValue(System.Type key, out System.Collections.Generic.List<Microsoft.OpenApi.ValidationRule>? rules) { }
        public bool Update(System.Type key, Microsoft.OpenApi.ValidationRule newRule, Microsoft.OpenApi.ValidationRule oldRule) { }
        public static void AddValidationRules(Microsoft.OpenApi.ValidationRuleSet ruleSet, System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<Microsoft.OpenApi.ValidationRule>> rules) { }
        public static Microsoft.OpenApi.ValidationRuleSet GetDefaultRuleSet() { }
        public static Microsoft.OpenApi.ValidationRuleSet GetEmptyRuleSet() { }
    }
    public class ValidationRule<T> : Microsoft.OpenApi.ValidationRule
    {
        public ValidationRule(string name, System.Action<Microsoft.OpenApi.IValidationContext, T> validate) { }
    }
}
namespace Microsoft.OpenApi.MicrosoftExtensions
{
    public class EnumDescription : Microsoft.OpenApi.IOpenApiElement
    {
        public EnumDescription() { }
        public EnumDescription(System.Text.Json.Nodes.JsonObject source) { }
        public string Description { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class OpenApiDeprecationExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiDeprecationExtension() { }
        public System.DateTimeOffset? Date { get; set; }
        public string Description { get; set; }
        public System.DateTimeOffset? RemovalDate { get; set; }
        public string Version { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiDeprecationExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
    public class OpenApiEnumFlagsExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiEnumFlagsExtension() { }
        public bool IsFlags { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiEnumFlagsExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
    public class OpenApiEnumValuesDescriptionExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiEnumValuesDescriptionExtension() { }
        public string EnumName { get; set; }
        public System.Collections.Generic.List<Microsoft.OpenApi.MicrosoftExtensions.EnumDescription> ValuesDescriptions { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiEnumValuesDescriptionExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
    public class OpenApiPagingExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiPagingExtension() { }
        public string ItemName { get; set; }
        public string NextLinkName { get; set; }
        public string OperationName { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiPagingExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
    public class OpenApiPrimaryErrorMessageExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiPrimaryErrorMessageExtension() { }
        public bool IsPrimaryErrorMessage { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiPrimaryErrorMessageExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
    public class OpenApiReservedParameterExtension : Microsoft.OpenApi.IOpenApiExtension
    {
        public OpenApiReservedParameterExtension() { }
        public bool? IsReserved { get; set; }
        public static string Name { get; }
        public void Write(Microsoft.OpenApi.IOpenApiWriter writer, Microsoft.OpenApi.OpenApiSpecVersion specVersion) { }
        public static Microsoft.OpenApi.MicrosoftExtensions.OpenApiReservedParameterExtension Parse(System.Text.Json.Nodes.JsonNode source) { }
    }
}
namespace Microsoft.OpenApi.Reader
{
    public class DefaultStreamLoader : Microsoft.OpenApi.IStreamLoader
    {
        public DefaultStreamLoader(System.Net.Http.HttpClient httpClient) { }
        public System.Threading.Tasks.Task<System.IO.Stream> LoadAsync(System.Uri baseUrl, System.Uri uri, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class JsonPointerExtensions
    {
        public static System.Text.Json.Nodes.JsonNode? Find(this Microsoft.OpenApi.JsonPointer currentPointer, System.Text.Json.Nodes.JsonNode baseJsonNode) { }
    }
    public class OpenApiDiagnostic
    {
        public OpenApiDiagnostic() { }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiError> Errors { get; set; }
        public string? Format { get; set; }
        public Microsoft.OpenApi.OpenApiSpecVersion SpecificationVersion { get; set; }
        public System.Collections.Generic.IList<Microsoft.OpenApi.OpenApiError> Warnings { get; set; }
        public void AppendDiagnostic(Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnosticToAdd, string? fileNameToAdd = null) { }
    }
    public class OpenApiJsonReader : Microsoft.OpenApi.IOpenApiReader
    {
        public OpenApiJsonReader() { }
        public Microsoft.OpenApi.Reader.ReadResult Read(System.IO.MemoryStream input, System.Uri location, Microsoft.OpenApi.Reader.OpenApiReaderSettings settings) { }
        public Microsoft.OpenApi.Reader.ReadResult Read(System.Text.Json.Nodes.JsonNode jsonNode, System.Uri location, Microsoft.OpenApi.Reader.OpenApiReaderSettings settings) { }
        public System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> ReadAsync(System.IO.Stream input, System.Uri location, Microsoft.OpenApi.Reader.OpenApiReaderSettings settings, System.Threading.CancellationToken cancellationToken = default) { }
        public T? ReadFragment<T>(System.IO.MemoryStream input, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, out Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public T? ReadFragment<T>(System.Text.Json.Nodes.JsonNode input, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, out Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null)
            where T : Microsoft.OpenApi.IOpenApiElement { }
    }
    public static class OpenApiModelFactory
    {
        public static Microsoft.OpenApi.Reader.ReadResult Load(System.IO.MemoryStream stream, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null) { }
        public static T? Load<T>(System.IO.MemoryStream input, Microsoft.OpenApi.OpenApiSpecVersion version, string? format, Microsoft.OpenApi.OpenApiDocument openApiDocument, out Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> LoadAsync(string url, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken token = default) { }
        public static System.Threading.Tasks.Task<Microsoft.OpenApi.Reader.ReadResult> LoadAsync(System.IO.Stream input, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<T?> LoadAsync<T>(string url, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken token = default)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static System.Threading.Tasks.Task<T?> LoadAsync<T>(System.IO.Stream input, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null, System.Threading.CancellationToken token = default)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public static Microsoft.OpenApi.Reader.ReadResult Parse(string input, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null) { }
        public static T? Parse<T>(string input, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument, out Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic, string? format = null, Microsoft.OpenApi.Reader.OpenApiReaderSettings? settings = null)
            where T : Microsoft.OpenApi.IOpenApiElement { }
    }
    public class OpenApiReaderSettings
    {
        public OpenApiReaderSettings() { }
        public System.Uri? BaseUrl { get; set; }
        public Microsoft.OpenApi.IStreamLoader? CustomExternalLoader { get; set; }
        public System.Collections.Generic.List<string>? DefaultContentType { get; set; }
        public System.Collections.Generic.Dictionary<string, System.Func<System.Text.Json.Nodes.JsonNode, Microsoft.OpenApi.OpenApiSpecVersion, Microsoft.OpenApi.IOpenApiExtension>>? ExtensionParsers { get; set; }
        public System.Net.Http.HttpClient HttpClient { init; }
        public bool LeaveStreamOpen { get; set; }
        public bool LoadExternalRefs { get; set; }
        public System.Collections.Generic.Dictionary<string, Microsoft.OpenApi.IOpenApiReader> Readers { get; init; }
        public Microsoft.OpenApi.ValidationRuleSet RuleSet { get; set; }
        public void AddJsonReader() { }
        public void AddMicrosoftExtensionParsers() { }
        public bool TryAddReader(string format, Microsoft.OpenApi.IOpenApiReader reader) { }
    }
    public static class OpenApiVersionExtensionMethods
    {
        public static bool is2_0(this string version) { }
        public static bool is3_0(this string version) { }
        public static bool is3_1(this string version) { }
        public static bool is3_2(this string version) { }
    }
    public class ParsingContext
    {
        public ParsingContext(Microsoft.OpenApi.Reader.OpenApiDiagnostic diagnostic) { }
        public System.Uri? BaseUrl { get; set; }
        public System.Collections.Generic.List<string>? DefaultContentType { get; set; }
        public Microsoft.OpenApi.Reader.OpenApiDiagnostic Diagnostic { get; }
        public System.Collections.Generic.Dictionary<string, System.Func<System.Text.Json.Nodes.JsonNode, Microsoft.OpenApi.OpenApiSpecVersion, Microsoft.OpenApi.IOpenApiExtension>>? ExtensionParsers { get; set; }
        public void EndObject() { }
        public T? GetFromTempStorage<T>(string key, object? scope = null) { }
        public string GetLocation() { }
        public Microsoft.OpenApi.OpenApiDocument Parse(System.Text.Json.Nodes.JsonNode jsonNode, System.Uri location) { }
        public T? ParseFragment<T>(System.Text.Json.Nodes.JsonNode jsonNode, Microsoft.OpenApi.OpenApiSpecVersion version, Microsoft.OpenApi.OpenApiDocument openApiDocument)
            where T : Microsoft.OpenApi.IOpenApiElement { }
        public void SetTempStorage(string key, object? value, object? scope = null) { }
        public void StartObject(string objectName) { }
    }
    public class ReadResult
    {
        public ReadResult() { }
        public Microsoft.OpenApi.Reader.OpenApiDiagnostic? Diagnostic { get; set; }
        public Microsoft.OpenApi.OpenApiDocument? Document { get; set; }
        public void Deconstruct(out Microsoft.OpenApi.OpenApiDocument? document, out Microsoft.OpenApi.Reader.OpenApiDiagnostic? diagnostic) { }
    }
}