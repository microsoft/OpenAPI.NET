# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
    - main
    - dev
    - support/v1
pr:
  branches:
    include:
    - main
    - dev
    - support/v1
variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ProductBinPath: '$(Build.SourcesDirectory)\src\Microsoft.OpenApi\bin\$(BuildConfiguration)'
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: build
      jobs:
      - job: build
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Artifact: Nugets'
            artifactName: Nugets
            targetPath: '$(Build.ArtifactStagingDirectory)/Nugets'
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 6'
          inputs:
            version: 6.x

        - task: UseDotNet@2
          displayName: 'Use .NET 8'
          inputs:
            version: 8.x
        
        # Install the nuget tool.
        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet >=6.11.0'
          inputs:
            versionSpec: '>=6.11.0'
            checkLatest: true

        # Build the Product project
        - task: DotNetCoreCLI@2
          displayName: 'build'
          inputs:
            projects: '$(Build.SourcesDirectory)\Microsoft.OpenApi.sln'
            arguments: '--configuration $(BuildConfiguration) --no-incremental'

        # Run the Unit test
        - task: DotNetCoreCLI@2
          displayName: 'test'
          inputs:
            command: test
            projects: '$(Build.SourcesDirectory)\Microsoft.OpenApi.sln'
            arguments: '--configuration $(BuildConfiguration) --no-build'

        - task: EsrpCodeSigning@5
          displayName: 'ESRP CodeSigning binaries'
          inputs:
            ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
            AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
            AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
            AuthAKVName: 'akv-prod-eastus'
            AuthCertName: 'ReferenceLibraryPrivateCert'
            AuthSignCertName: 'ReferencePackagePublisherCertificate'
            FolderPath: '$(Build.SourcesDirectory)\src'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [ ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
              ]
            SessionTimeout: '20'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'
            PendingAnalysisWaitTimeoutMinutes: '5'

        # Pack core lib
        - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Microsoft.OpenApi/Microsoft.OpenApi.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
          displayName: 'pack OpenAPI'

        # Pack readers
        - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Microsoft.OpenApi.Readers/Microsoft.OpenApi.Readers.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
          displayName: 'pack Readers'

        # Pack hidi
        - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Microsoft.OpenApi.Hidi/Microsoft.OpenApi.Hidi.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
          displayName: 'pack Hidi'

        - task: EsrpCodeSigning@5
          displayName: 'ESRP CodeSigning Nuget Packages'
          inputs:
            ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
            AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
            AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
            AuthAKVName: 'akv-prod-eastus'
            AuthCertName: 'ReferenceLibraryPrivateCert'
            AuthSignCertName: 'ReferencePackagePublisherCertificate'
            FolderPath: '$(Build.ArtifactStagingDirectory)'
            Pattern: '*.nupkg'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                                  {
                                      "keyCode": "CP-401405",
                                      "operationSetCode": "NuGetSign",
                                      "parameters": [ ],
                                      "toolName": "sign",
                                      "toolVersion": "1.0"
                                  },
                                  {
                                      "keyCode": "CP-401405",
                                      "operationSetCode": "NuGetVerify",
                                      "parameters": [ ],
                                      "toolName": "sign",
                                      "toolVersion": "1.0"
                                  }
                              ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'
            PendingAnalysisWaitTimeoutMinutes: '5'
      
        # publish hidi as an .exe
        - task: DotNetCoreCLI@2
          displayName: publish Hidi as executable
          inputs:
            command: 'publish'
            arguments: -c Release --runtime win-x64 /p:PublishSingleFile=true /p:PackAsTool=false --self-contained --output $(Build.ArtifactStagingDirectory)/Microsoft.OpenApi.Hidi
            projects: 'src/Microsoft.OpenApi.Hidi/Microsoft.OpenApi.Hidi.csproj'
            publishWebProjects: False
            zipAfterPublish: false
            
        - task: CopyFiles@2
          displayName: Prepare staging folder for upload
          inputs:
            targetFolder: $(Build.ArtifactStagingDirectory)/Nugets
            sourceFolder: $(Build.ArtifactStagingDirectory)
            content: '*.nupkg'
            
    - stage: deploy
      condition: and(or(contains(variables['build.sourceBranch'], 'refs/heads/main'),contains(variables['build.sourceBranch'], 'refs/heads/support/v1')), succeeded())
      dependsOn: build
      jobs:
      - deployment: deploy_hidi
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            artifactName: Nugets
            targetPath: '$(Pipeline.Workspace)'
        dependsOn: []
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
              - pwsh: |
                  $artifactName = Get-ChildItem -Path $(Pipeline.Workspace)\Nugets -Filter Microsoft.OpenApi.*.nupkg -recurse | select -First 1
                  $artifactVersion= $artifactName.Name -replace "Microsoft.OpenApi.", "" -replace ".nupkg", ""
                  #Set Variable $artifactName and $artifactVersion
                  Write-Host "##vso[task.setvariable variable=artifactVersion; isSecret=false; isOutput=true]$artifactVersion"
                  echo "$artifactVersion"
                displayName: 'Fetch Artifact Name'
                name: getTagVersion
              - task: 1ES.PublishNuget@1
                displayName: 'NuGet push'
                inputs:
                  packagesToPush: '$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Hidi.*.nupkg'
                  packageParentPath: '$(Pipeline.Workspace)'
                  nuGetFeedType: external
                  publishFeedCredentials: 'OpenAPI Nuget Connection'
              - task: GitHubRelease@1
                displayName: 'GitHub release (edit)'
                condition: succeededOrFailed()
                inputs:
                  gitHubConnection: 'Github-MaggieKimani1'
                  action: create
                  tagSource: userSpecifiedTag
                  tag: '$(getTagVersion.artifactVersion)'
                  title: '$(getTagVersion.artifactVersion)'
                  releaseNotesSource: inline
                  assets: '$(Pipeline.Workspace)\**\*.exe'
                  changeLogType: issueBased
                  changeLogLabels: '[ 
                    { "label" : "feature-work", "feature", "displayName" : "New Features", "state" : "closed" }, 
                    { "label" : "enhancement", "V2-Enhancement", "displayName" : "Enhancements", "state" : "closed" }, 
                    { "label" : "bug", "bug-fix", "displayName" : "Bugs", "state" : "closed" }, 
                    { "label" : "documentation", "doc", "displayName" : "Documentation", "state" : "closed"}, 
                    { "label" : "dependencies", "displayName" : "Package Updates", "state" : "closed" }
                    ]'

      - deployment: deploy_lib
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            artifactName: Nugets
            targetPath: '$(Pipeline.Workspace)'
        dependsOn: []
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
              - powershell: |
                  $fileNames = "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Hidi.*.nupkg", "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Readers.*.nupkg", "$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Workbench.*.nupkg"
                  foreach($fileName in $fileNames) {
                    if(Test-Path $fileName) {
                      rm $fileName -Verbose
                    }
                  }
                displayName: remove other nupkgs to avoid duplication
              - task: 1ES.PublishNuget@1
                displayName: 'NuGet push'
                inputs:
                  packagesToPush: '$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.*.nupkg'
                  packageParentPath: '$(Pipeline.Workspace)'
                  nuGetFeedType: external
                  publishFeedCredentials: 'OpenAPI Nuget Connection'

      - deployment: deploy_readers
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            artifactName: Nugets
            targetPath: '$(Pipeline.Workspace)'
        dependsOn: deploy_lib
        environment: nuget-org
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
              - task: 1ES.PublishNuget@1
                displayName: 'NuGet push'
                inputs:
                  packagesToPush: '$(Pipeline.Workspace)/Nugets/Microsoft.OpenApi.Readers.*.nupkg'
                  packageParentPath: '$(Pipeline.Workspace)'
                  nuGetFeedType: external
                  publishFeedCredentials: 'OpenAPI Nuget Connection'