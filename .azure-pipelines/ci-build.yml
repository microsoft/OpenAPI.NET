# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - main
      - task/migrate-acr-pipeline
  paths:
    include:
      - src/**
      - .azure-pipelines/**
  tags:
    include:
      - v*

pr:
  branches:
    include:
      - main
      - task/migrate-acr-pipeline

variables:
  REGISTRY: 'msgraphprodregistry.azurecr.io'
  IMAGE_NAME: 'public/openapi/hidi'
  PREVIEW_BRANCH: 'refs/heads/task/migrate-acr-pipeline'

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self
  
  - task: AzureCLI@2
    displayName: 'Login to Azure Container Registry'
    inputs:
      azureSubscription: 'ACR Images Push Service Connection'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az acr login --name msgraphpperegistry
  
  - powershell: |
      $content = [XML](Get-Content ./Directory.Build.props)
      Write-Host "XML loaded, finding version..."
      
      # Handle PropertyGroup as either a single element or array
      $version = $null
      if ($content.Project.PropertyGroup -is [array]) {
        Write-Host "PropertyGroup is an array, checking each entry..."
        foreach ($pg in $content.Project.PropertyGroup) {
          if ($pg.Version) {
            $version = $pg.Version.ToString().Trim()
            Write-Host "Found version in PropertyGroup array: $version"
            break
          }
        }
      } else {
        # Single PropertyGroup
        $version = $content.Project.PropertyGroup.Version
        if ($version) {
          $version = $version.ToString().Trim()
          Write-Host "Found version in PropertyGroup: $version"
        }
      }
      
      if (-not $version) {
        Write-Host "##vso[task.logissue type=error]Version not found in Directory.Build.props"
        exit 1
      }
      
      Write-Host "Version found: $version" 
      Write-Host "##vso[task.setvariable variable=version;isoutput=true]$version"
      Write-Host "##vso[task.setvariable variable=VERSION]$version"
    displayName: 'Get version from csproj'
    name: getversion
  
  - bash: |
      # Debug output to verify version variable
      echo "Version from previous step: $VERSION"
    displayName: 'Verify version variable'
  
  - bash: |
      runnumber=$(echo $(Build.BuildNumber) | awk '{ print substr($0, length($0)-3, length($0)) }')
      echo "##vso[task.setvariable variable=RUNNUMBER]$runnumber"
    displayName: 'Get truncated run number'
    condition: eq(variables['Build.SourceBranch'], variables['PREVIEW_BRANCH'])
  
  - bash: |
      date=$(date +'%Y%m%d')
      echo "Date value: $date"
      echo "##vso[task.setvariable variable=BUILDDATE;isOutput=true]$date"
      echo "##vso[task.setvariable variable=BUILDDATE]$date"
    displayName: 'Get current date'
    name: setdate
    condition: eq(variables['Build.SourceBranch'], variables['PREVIEW_BRANCH'])
  
  - bash: |
      echo "Building Docker image..."
      echo "Using build date: ${BUILDDATE}"
      # Using quotes around tags to prevent flag interpretation
      docker build \
        -t "$(REGISTRY)/$(IMAGE_NAME):nightly" \
        -t "$(REGISTRY)/$(IMAGE_NAME):${VERSION}.${BUILDDATE}${RUNNUMBER}" \
        "$(Build.SourcesDirectory)"
      
      echo "Pushing Docker image with nightly tag..."
      docker push "$(REGISTRY)/$(IMAGE_NAME):nightly"
      docker push "$(REGISTRY)/$(IMAGE_NAME):${VERSION}.${BUILDDATE}${RUNNUMBER}"
    displayName: 'Build and Push Nightly Image'
    condition: eq(variables['Build.SourceBranch'], variables['PREVIEW_BRANCH'])
  
  - bash: |
      echo "Building Docker image for release..."
      docker build \
        -t "$(REGISTRY)/$(IMAGE_NAME):latest" \
        -t "$(REGISTRY)/$(IMAGE_NAME):${VERSION}.${BUILDDATE}${RUNNUMBER}" \
        "$(Build.SourcesDirectory)"
      
      echo "Pushing Docker image with latest and version tags..."
      docker push "$(REGISTRY)/$(IMAGE_NAME):latest"
      docker push "$(REGISTRY)/$(IMAGE_NAME):${VERSION}.${BUILDDATE}${RUNNUMBER}"
    displayName: 'Build and Push Release Image'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')

